---
- name: Ansible config for Vagrant provision of vvroom
  hosts: localhost
  connection: local
  gather_facts: true
  become: true
  vars:
    notvagrant: vagrant  # re-use the vagrant|vagrant user instead of making a new one
    my_hostname: vvroom # vm hostname
    dev_dir: /vagrant/_dev
    nodejs_dir: /usr/local/lib/nodejs
    nvm_ver: v0.35.3
    node_ver: v22.0.0
    node_arch: "{{ ansible_architecture | regex_replace('^(aarch64)$', 'linux-arm64') | regex_replace('^(x86_64)$', 'linux-x64') }}"
    node_path: "{{ node_ver }}-{{ node_arch }}"
    my_env_vars:
      PATH: "{{ ansible_env.PATH }}:{{ nodejs_dir }}//node-{{ node_path }}/bin"

  tasks:
    - name: Set hostname
      tags: host
      ansible.builtin.hostname:
        name: "{{ my_hostname }}"

    - name: Set the hostname file content
      tags: host
      ansible.builtin.copy:
        dest: "/etc/hostname"
        content: "{{ my_hostname }}"
        mode: "644"

    - name: Install some packages
      tags: host
      ansible.builtin.package:
        name:
          - bzip2
          - gcc
          - git
          - make
          - osc
          - perl
          - rsync
          - unzip
        state: present

    - name: Install xz for opensuse
      tags: host
      ansible.builtin.package:
        name:
          - xz
        state: present
      when: ansible_distribution == "openSUSE Leap"

    - name: Add GPG key for Google Cloud packages
      when: ansible_distribution != 'Amazon'  # Exclude Amazon Linux
      block:
        - name: Add GPG key for apt (Debian-based systems)
          ansible.builtin.apt_key:
            url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
            state: present
          when: ansible_os_family == 'Debian'

        - name: Add GPG key for rpm (RedHat-based systems)
          ansible.builtin.rpm_key:
            key: https://packages.cloud.google.com/yum/doc/yum-key.gpg
            state: present
          when: ansible_os_family == 'RedHat' or ansible_os_family == 'SUSE'

    - name: Download Node.js tarball based on architecture
      tags: node
      ansible.builtin.get_url:
        url: https://nodejs.org/dist/{{ node_ver }}/node-{{ node_path }}.tar.xz
        dest: /tmp
        mode: '0644'

    - name: Creates nodejs directory
      tags: node
      ansible.builtin.file:
        dest: "{{ nodejs_dir }}"
        state: directory
        mode: '0755'

    - name: Extract Node.js tarball
      tags: node
      ansible.builtin.unarchive:
        src: /tmp/node-{{ node_path }}.tar.xz
        dest: "{{ nodejs_dir }}"
        remote_src: true

    - name: Install snap package
      tags: snap
      community.general.snap:
        name: "{{ item }}"
        state: present
        classic: true
      when: ansible_os_family == 'Debian'
      with_items:
        - go
        - google-cloud-sdk
        - kubectl

    - name: Make sure env is adjusted for users
      tags: host
      ansible.builtin.copy:
        dest: /etc/profile.d/{{ my_hostname }}.sh
        content: |
          export PATH=$PATH:{{ nodejs_dir }}/node-{{ node_path }}/bin
          export GIT_DISCOVERY_ACROSS_FILESYSTEM=1
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          export GOPATH=$HOME/snap/go/common
        mode: '0755'

    - name: Download NVM installation script
      tags: node
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/nvm-sh/nvm/{{ nvm_ver }}/install.sh
        dest: /tmp/install_nvm.sh
        mode: '0755'

    - name: Execute NVM installation script
      tags: node
      ansible.builtin.script: /tmp/install_nvm.sh

    - name: Update apt cache
      tags: host
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Install deb packages
      tags: host
      ansible.builtin.package:
        name:
          - docker.io
          - postgresql-client
          # - google-cloud-sdk-gke-gcloud-auth-plugin
        state: present
      when: ansible_os_family == "Debian"

    - name: Add golang repository for leap
      tags: host
      community.general.zypper_repository:
        name: go
        repo: https://download.opensuse.org/repositories/devel:/languages:/go/15.5/
        auto_import_keys: true
        autorefresh: true
      when: ansible_distribution == "openSUSE Leap"

    - name: Install leap packages
      tags: host,docker,iptables
      ansible.builtin.package:
        name:
          - go
          - docker
          - iptables
          - firewalld
          - kernel-devel
          - kernel-default-devel
          - postgresql16
        state: present
      when: ansible_distribution == "openSUSE Leap"

    - name: Create user id
      tags: host
      ansible.builtin.user:
        name: "{{ notvagrant }}"
        shell: /bin/bash
        state: present
        groups: users,docker

    - name: Determine public interface name
      tags: host,iptables
      ansible.builtin.set_fact:
        public_ifname: "{{ ansible_default_ipv4.interface }}"

    - name: Apply iptables rule with dynamic interface name
      tags: host,iptables
      ansible.builtin.shell: |
        iptables -t nat -A PREROUTING -i {{ public_ifname }} -p tcp --dport 443 -j REDIRECT --to-port 3000
      # iptables -t nat -A PREROUTING -i {{ public_ifname }} -p tcp --dport 8086 -j REDIRECT --to-port 8086

    - name: "Add docker db to hosts file"
      tags: docker
      ansible.builtin.lineinfile:
        dest: /etc/hosts
        regexp: '.*postgres$'
        line: "172.18.0.10  postgres"
        state: present

    - name: Create a network with custom IPAM config
      tags: docker
      community.docker.docker_network:
        name: dockernet
        ipam_config:
          - subnet: 172.18.0.0/16
            gateway: 172.18.0.2

    - name: Create db container and connect to network
      tags: docker
      community.docker.docker_container:
        name: postgres
        image: "postgres:latest"
        networks:
          - name: "dockernet"
            ipv4_address: "172.18.0.10"
        volumes:
          - /var/lib/postgresql:/var/lib/postgresql
          - /vagrant/provisioning/scripts:/mnt/scripts
        exposed_ports:
          - 5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sesame_saffron

    - name: Add conf files to telegraf.d
      tags: telegraf
      become: true
      become_user: "{{ notvagrant }}"
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /home/{{ notvagrant }}
        mode: "0644"
      with_fileglob:
        - /vagrant/provisioning/.vimrc

    - name: Provide sudo passwordless
      tags: host
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/{{ notvagrant }}"
        content: "{{ notvagrant }} ALL=(ALL) NOPASSWD: ALL"
        mode: "400"

    - name: Add authorized_keys for remote user
      tags: host
      ansible.posix.authorized_key:
        user: "{{ notvagrant }}"
        key: "{{ item }} {{ notvagrant }}"
        state: present
      with_items:
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGnygm4PngHI1rMohD3rwZ8exVUjBp+WQhDuUPOgDkiG
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICIMi7opzFIhXv9QVbroDd5ND+ouFwy1kxkzFG4E5nZr

    - name: Enable and start the docker service
      tags: docker
      ansible.builtin.service:
        name: docker
        enabled: true
        state: started

    - name: Install node packages globally
      tags: yarn,node
      community.general.npm:
        name: "{{ item }}"
        global: true
      environment: "{{ my_env_vars }}"
      with_items:
        - yarn
